{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The English SDK for Apache Spark is an extremely simple yet powerful tool. It takes English instructions and compile them into PySpark objects like DataFrames. Its goal is to make Spark more user-friendly and accessible, allowing you to focus your efforts on extracting insights from your data.</p> <p></p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#dataframe-transformation","title":"DataFrame Transformation","text":"<p>Given the following DataFrame <code>df</code>, you can write English to transform it to another DataFrame. For example: <pre><code>df.ai.transform(\"What are the best-selling and the second best-selling products in every category?\").show()\n</code></pre></p> product category revenue Foldable Cellphone 6500 Nromal Cellphone 6000 Mini Tablet 5500 Pro Tablet 4000"},{"location":"#data-ingestion","title":"Data Ingestion","text":"<pre><code>auto_df = spark_ai.create_df(\"2022 USA national auto sales by brand\")\n</code></pre>"},{"location":"#plot","title":"Plot","text":"<p><pre><code>auto_df.ai.plot(\"pie chart for US sales market shares, show the top 5 brands and the sum of others\")\n</code></pre> </p>"},{"location":"cache/","title":"Cache","text":"<p>The English SDK supports a simple in-memory and persistent cache system. It keeps an in-memory staging cache, which gets updated for LLM and web search results. The staging cache can be persisted through the commit() method. Cache lookup is always performed on both in-memory staging cache and persistent cache. <pre><code>spark_ai.commit()\n</code></pre></p>"},{"location":"contributing/","title":"Contributing","text":"<p>We're delighted that you're considering contributing to the English SDK for Apache Spark project! Whether you're fixing a bug or proposing a new feature, your contribution is highly appreciated.</p> <p>Before you start, please take a moment to read our Contribution Guide. This guide provides an overview of how you can contribute to our project. We're currently in the early stages of development and we're working on introducing more comprehensive test cases and Github Action jobs for enhanced testing of each pull request.</p> <p>If you have any questions or need assistance, feel free to open a new issue in the GitHub repository.</p> <p>Thank you for helping us improve the English SDK for Apache Spark. We're excited to see your contributions!</p>"},{"location":"data_ingestion/","title":"Data Ingestion","text":""},{"location":"data_ingestion/#api","title":"API","text":"<pre><code>SparkAI.create_df(\ndesc: str,\ncolumns: Optional[List[str]] = None,\ncache: bool = True) -&gt; DataFrame\n</code></pre> <p>This method create a Spark DataFrame by querying an LLM from web search result.</p> <ul> <li>param desc: the description of the result DataFrame, which will be used for web searching</li> <li>param columns: the expected column names in the result DataFrame</li> <li>param cache: If <code>True</code>, fetches cached data, if available. If <code>False</code>, retrieves fresh data and updates cache.</li> <li>return: a Spark DataFrame</li> </ul>"},{"location":"data_ingestion/#example","title":"Example","text":"<p>If you have set up the Google Python client, you can ingest data via search engine: <pre><code>auto_df = spark_ai.create_df(\"2022 USA national auto sales by brand\")\n</code></pre> Otherwise, you can ingest data via URL: <pre><code>auto_df = spark_ai.create_df(\"https://www.carpro.com/blog/full-year-2022-national-auto-sales-by-brand\")\n</code></pre></p> <p>Take a look at the data: <pre><code>auto_df.show(n=5)\n</code></pre></p> rank brand us_sales_2022 sales_change_vs_2021 1 Toyota 1849751 -9 2 Ford 1767439 -2 3 Chevrolet 1502389 6 4 Honda 881201 -33 5 Hyundai 724265 -2"},{"location":"dataframe_explanation/","title":"DataFrame Explanation","text":""},{"location":"dataframe_explanation/#api","title":"API","text":"<pre><code>DataFrame.ai.explain(cache: bool = True) -&gt; str:\n</code></pre>"},{"location":"dataframe_explanation/#example","title":"Example","text":"<p>Given a DataFrame <code>auto_df</code> from Data Ingestion, you can explain a DataFrame with the following code: <pre><code>auto_top_growth_df=auto_df.ai.transform(\"brand with the highest growth\")\nauto_top_growth_df.ai.explain()\n</code></pre></p> <p>In summary, this dataframe is retrieving the brand with the highest sales change in 2022 compared to 2021. It presents the results sorted by sales change in descending order and only returns the top result.</p>"},{"location":"dataframe_transformation/","title":"DataFrame Transformation","text":""},{"location":"dataframe_transformation/#api","title":"API","text":"<pre><code>DataFrame.ai.transform(desc: str, cache: bool = True) -&gt; DataFrame\n</code></pre> <p>This method applies a transformation to a provided Spark DataFrame, the specifics of which are determined by the <code>desc</code> parameter:</p> <ul> <li>param desc: A natural language string that outlines the specific transformation to be applied on the DataFrame.</li> <li>param cache: If <code>True</code>, fetches cached data, if available. If <code>False</code>, retrieves fresh data and updates cache.</li> <li>return: Returns a new Spark DataFrame that is the result of applying the specified transformation                  on the input DataFrame.</li> </ul>"},{"location":"dataframe_transformation/#example","title":"Example","text":"<p>Given the following DataFrame <code>df</code>: <pre><code>df = spark_ai._spark.createDataFrame(\n[\n(\"Normal\", \"Cellphone\", 6000),\n(\"Normal\", \"Tablet\", 1500),\n(\"Mini\", \"Tablet\", 5500),\n(\"Mini\", \"Cellphone\", 5000),\n(\"Foldable\", \"Cellphone\", 6500),\n(\"Foldable\", \"Tablet\", 2500),\n(\"Pro\", \"Cellphone\", 3000),\n(\"Pro\", \"Tablet\", 4000),\n(\"Pro Max\", \"Cellphone\", 4500)\n],\n[\"product\", \"category\", \"revenue\"]\n)\n</code></pre></p> <p>You can write English to perform transformations. For example: <pre><code>df.ai.transform(\"What are the best-selling and the second best-selling products in every category?\").show()\n</code></pre></p> product category revenue Foldable Cellphone 6500 Nromal Cellphone 6000 Mini Tablet 5500 Pro Tablet 4000 <pre><code>df.ai.transform(\"Pivot the data by product and the revenue for each product\").show()\n</code></pre> Category Normal Mini Foldable Pro Pro Max Cellphone 6000 5000 6500 3000 4500 Tablet 1500 5500 2500 4000 null <p>For a detailed walkthrough of the transformations, please refer to our transform_dataframe.ipynb notebook.</p>"},{"location":"dataframe_verification/","title":"DataFrame Verification","text":""},{"location":"dataframe_verification/#api","title":"API","text":"<p><pre><code>DataFrame.ai.verify(desc: Optional[str] = None, cache: bool = True) -&gt; None\n</code></pre> This method creates and runs test cases for the provided PySpark dataframe transformation function. The result is shown in the logging output.</p>"},{"location":"dataframe_verification/#example","title":"Example","text":"<p>Given a DataFrame <code>auto_df</code> from Data Ingestion: <pre><code>auto_df.ai.verify(\"expect sales change percentage to be between -100 to 100\")\n</code></pre></p> <p>result: True</p>"},{"location":"installation_and_setup/","title":"Installation and setup","text":""},{"location":"installation_and_setup/#installation","title":"Installation","text":"<pre><code>pip install pyspark-ai\n</code></pre>"},{"location":"installation_and_setup/#configuring-openai-llms","title":"Configuring OpenAI LLMs","text":"<p>As of July 2023, we have found that the GPT-4 works optimally with the English SDK. This superior AI model is readily accessible to all developers through the OpenAI API.</p> <p>To use OpenAI's Language Learning Models (LLMs), you can set your OpenAI secret key as the <code>OPENAI_API_KEY</code> environment variable. This key can be found in your OpenAI account. Example: <pre><code>export OPENAI_API_KEY='sk-...'\n</code></pre> By default, the <code>SparkAI</code> instances will use the GPT-4 model. However, you're encouraged to experiment with creating and implementing other LLMs, which can be passed during the initialization of <code>SparkAI</code> instances for various use-cases.</p>"},{"location":"installation_and_setup/#initialization","title":"Initialization","text":"<pre><code>from pyspark_ai import SparkAI\nspark_ai = SparkAI()\nspark_ai.activate()  # active partial functions for Spark DataFrame\n</code></pre> <p>You can also pass other LLMs to construct the SparkAI instance. For example, by following this guide: <pre><code>from langchain.chat_models import AzureChatOpenAI\nfrom pyspark_ai import SparkAI\nllm = AzureChatOpenAI(\ndeployment_name=...,\nmodel_name=...\n)\nspark_ai = SparkAI(llm=llm)\nspark_ai.activate()  # active partial functions for Spark DataFrame\n</code></pre></p> <p>As per Microsoft's Data Privacy page, using the Azure OpenAI service can provide better data privacy and security.</p>"},{"location":"plot/","title":"Plot","text":""},{"location":"plot/#api","title":"API","text":"<p><pre><code>DataFrame.ai.plot(desc: Optional[str] = None, cache: bool = True) -&gt; None\n</code></pre> This method is used to plot a Spark DataFrame, the specifics of which are determined by the <code>desc</code> parameter. If <code>desc</code> is not provided, the method will try to plot the DataFrame based on its schema. - param desc: An optional natural language string that outlines the specific transformation to be applied on the DataFrame. - param cache: If <code>True</code>, fetches cached data, if available. If <code>False</code>, retrieves fresh data and updates cache. - return: None</p>"},{"location":"plot/#example","title":"Example","text":"<p>Given a DataFrame <code>auto_df</code> from Data Ingestion, you can plot it with the following code: <pre><code>auto_df.ai.plot()\n</code></pre> </p> <p>To plot with an instruction: <pre><code>auto_df.ai.plot(\"pie chart for US sales market shares, show the top 5 brands and the sum of others\")\n</code></pre> </p>"},{"location":"resources/","title":"Resources","text":"<p>For a more comprehensive introduction and background to our project, we have the following resources:</p> <ul> <li>Blog Post: A detailed walkthrough of our project.</li> <li>Demo Video: 2023 Data + AI summit announcement video with demo.</li> <li>Breakout Session: A deep dive into the story behind the English SDK, its features, and future works at DATA+AI summit 2023.</li> </ul>"},{"location":"udf_generation/","title":"UDF Generation","text":"<p>You can use the <code>@spark_ai.udf</code> decorator to generate UDFs from Python functions. There is no need to implement the body of the method.</p> <p>For example, given a DataFrame <code>auto_df</code> from Data Ingestion: <pre><code>@spark_ai.udf\ndef previous_years_sales(brand: str, current_year_sale: int, sales_change_percentage: float) -&gt; int:\n\"\"\"Calculate previous years sales from sales change percentage\"\"\"\n...\nspark.udf.register(\"previous_years_sales\", previous_years_sales)\nauto_df.createOrReplaceTempView(\"autoDF\")\nspark.sql(\"select brand as brand, previous_years_sales(brand, us_sales, sales_change_percentage) as 2021_sales from autoDF\").show()\n</code></pre></p> brand 2021_sales Toyota 2032693 Ford 1803509 Chevrolet 1417348 Honda 1315225 Hyundai 739045"}]}